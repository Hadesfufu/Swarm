////////////////////////////////////////////////////////////
// < Fichier : "Drawer.h"> 
// < Author : Yohan "HadesFufu" Masson >
////////////////////////////////////////////////////////////

//	modify by Vassili "Bakasama" Rezvoy - 08/06/2016

#ifndef DRAWER_H
#define DRAWER_H

#include <memory>
#include "Log.h"
#include "Singleton.h"		
#include "DrawingAnimation.h"
#include "DrawingAnimationMovement.h"
#include "DrawingAnimationRotation.h"
#include "DrawingAnimationScale.h"
#include "DrawingAnimationFade.h"
#include "pugixml.hpp"
#include "DrawerStructures.h"

class Drawer : public Singleton<Drawer>
{
	friend class Singleton < Drawer >;
public:
	////////////////////////////////////////////////////////////
    // Clear and draw all elements on the window
    ////////////////////////////////////////////////////////////
	void draw();
	
    ////////////////////////////////////////////////////////////
	// @param : integer 
	// @param : sf::Drawable
	// @param : sf::Shader (optional)
    // Add the selected element to the header
    ////////////////////////////////////////////////////////////
	void addToLayer(int layer, const sf::Drawable* drawable, sf::Shader* = nullptr);
	void addToLayer(std::string layer, const sf::Drawable* drawable, sf::Shader* = nullptr);

    ////////////////////////////////////////////////////////////
    // Add animation and plays it
    ////////////////////////////////////////////////////////////
	void addAnimation(DrawingAnimation* anim);
	
    ////////////////////////////////////////////////////////////
    // Add elements to parallax
    ////////////////////////////////////////////////////////////
	void addParallax(pugi::xml_node& data);
	
    ////////////////////////////////////////////////////////////
    // Hide the layer
    ////////////////////////////////////////////////////////////
	void hideLayer(int layer);
	void hideLayer(std::string layer);
	
    ////////////////////////////////////////////////////////////
    // Hide the Element
    ////////////////////////////////////////////////////////////
	void hideElement(const sf::Drawable* elem);
	
    ////////////////////////////////////////////////////////////
    // "Unhide" the layer
    ////////////////////////////////////////////////////////////
	void showLayer(int layer);
	void showLayer(std::string layer);
	
    ////////////////////////////////////////////////////////////
    // "Unhide" the element
    ////////////////////////////////////////////////////////////
	void showElement(const sf::Drawable* elem);
	
    ////////////////////////////////////////////////////////////
    // Clear all the elements in the drawer
    ////////////////////////////////////////////////////////////
	void clear();
	
    ////////////////////////////////////////////////////////////
    // Clear the selected layer
    ////////////////////////////////////////////////////////////
	void removeLayer(int layer);
	void removeLayer(std::string layer);

    ////////////////////////////////////////////////////////////
    // Clear the selected element
    ////////////////////////////////////////////////////////////
	bool removeElement(sf::Drawable* elem);

    ////////////////////////////////////////////////////////////
    // Getters 
    ////////////////////////////////////////////////////////////
	DrawerStructures::Drawable*		getDrawable(const sf::Drawable* elem);
	DrawerStructures::Z_index*		getLayer(int);
	DrawerStructures::Z_index*		getLayer(std::string layer);

	////////////////////////////////////////////////////////////
	// Setters
	////////////////////////////////////////////////////////////
	bool setWindow(sf::RenderWindow* window);

private:
	Drawer();
	Drawer(const Drawer&) = delete;
	~Drawer();

	Drawer& operator=(const Drawer &) = delete;

	////////////////////////////////////////////////////////////
	// Update the animations
	////////////////////////////////////////////////////////////
	void updateAnims();

	////////////////////////////////////////////////////////////
	// Update parallax elements
	////////////////////////////////////////////////////////////
	void updateParallax();

	////////////////////////////////////////////////////////////
	// Update parallax elements
	////////////////////////////////////////////////////////////

	void loadStaticLayers();
	
    ////////////////////////////////////////////////////////////
    // Members
    ////////////////////////////////////////////////////////////
	sf::RenderWindow*								m_Window;
	std::map <int, DrawerStructures::Z_index >		m_Layers;
	std::vector<std::unique_ptr<DrawingAnimation>>	m_Animations;
	std::map<std::string, int>						m_StaticLayers;
};

#endif 